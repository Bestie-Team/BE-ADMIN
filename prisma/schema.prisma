generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  email                        String                   @db.VarChar(255)
  provider                     OAuthProvider
  name                         String                   @db.VarChar(20)
  createdAt                    DateTime                 @map("created_at")
  deletedAt                    DateTime?                @map("deleted_at")
  accountId                    String                   @map("account_id") @db.VarChar(15)
  updatedAt                    DateTime                 @map("updated_at")
  profileImageUrl              String?                  @map("profile_image_url")
  notificationToken            String?                  @map("notification_token")
  marketingNotificationConsent Boolean                  @default(false) @map("marketing_notification_consent")
  serviceNotificationConsent   Boolean                  @default(false) @map("service_notification_consent")
  privacyPolicyConsent         Boolean                  @map("privacy_policy_consent")
  termsOfServiceConsent        Boolean                  @map("terms_of_service_consent")
  id                           String                   @id @db.Uuid
  gatherings                   Gathering[]
  gatheringParticipant         GatheringParticipation[]
  feeds                        Feed[]
  ownedGroups                  Group[]
  groupParticipation           GroupParticipation[]
  feedComments                 FeedComment[]
  blockedFeeds                 BlockedFeed[]
  sentFriendRequest            Friend[]                 @relation("SenderUser")
  receivedFriendRequests       Friend[]                 @relation("ReceiverUser")
  friendFeedVisibilities       FriendFeedVisibility[]
  notifications                Notification[]
  reports                      Report[]
  refreshTokens                RefreshToken[]
  blockedFeedComments          BlockedFeedComment[]
  blockUsers                   BlockedUser[]            @relation("BlockerUser")
  blockedUsers                 BlockedUser[]            @relation("BlockedUser")

  @@unique([email, deletedAt])
  @@unique([accountId, deletedAt])
  @@map("user")
}

model Gathering {
  name               String                   @db.VarChar(20)
  description        String                   @db.VarChar(40)
  gatheringDate      DateTime                 @map("gathering_date")
  address            String                   @db.VarChar(100)
  invitationImageUrl String                   @map("invitation_image_url")
  createdAt          DateTime                 @map("created_at")
  deletedAt          DateTime?                @map("deleted_at")
  updatedAt          DateTime                 @map("updated_at")
  type               GatheringType
  endedAt            DateTime?                @map("ended_at")
  id                 String                   @id @db.Uuid
  hostUserId         String                   @map("host_user_id") @db.Uuid
  groupId            String?                  @map("group_id") @db.Uuid
  group              Group?                   @relation(fields: [groupId], references: [id])
  user               User                     @relation(fields: [hostUserId], references: [id])
  participations     GatheringParticipation[]
  feeds              Feed[]

  @@index([hostUserId])
  @@index([groupId])
  @@map("gathering")
}

model GatheringParticipation {
  createdAt     DateTime                     @map("created_at")
  status        GatheringParticipationStatus @default(PENDING)
  updatedAt     DateTime                     @map("updated_at")
  readAt        DateTime?                    @map("read_at")
  id            String                       @id @db.Uuid
  gatheringId   String                       @map("gathering_id") @db.Uuid
  participantId String                       @map("participant_id") @db.Uuid
  gathering     Gathering                    @relation(fields: [gatheringId], references: [id], onDelete: Cascade)
  participant   User                         @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@index([gatheringId])
  @@index([participantId])
  @@map("gathering_participation")
}

model Feed {
  content                String                 @db.VarChar(150)
  createdAt              DateTime               @map("created_at")
  deletedAt              DateTime?              @map("deleted_at")
  updatedAt              DateTime               @map("updated_at")
  id                     String                 @id @db.Uuid
  writerId               String                 @map("writer_id") @db.Uuid
  gatheringId            String?                @map("gathering_id") @db.Uuid
  writer                 User                   @relation(fields: [writerId], references: [id])
  gathering              Gathering?             @relation(fields: [gatheringId], references: [id])
  images                 FeedImage[]
  comments               FeedComment[]
  blockedFeeds           BlockedFeed[]
  friendFeedVisibilities FriendFeedVisibility[]

  @@index([writerId])
  @@index([gatheringId])
  @@map("feed")
}

model FeedImage {
  url       String
  createdAt DateTime @map("created_at")
  index     Int
  id        String   @id @db.Uuid
  feedId    String   @map("feed_id") @db.Uuid
  feed      Feed     @relation(fields: [feedId], references: [id])

  @@index([feedId])
  @@map("feed_image")
}

model FeedComment {
  content   String
  createdAt DateTime             @map("created_at")
  deletedAt DateTime?            @map("deleted_at")
  id        String               @id @db.Uuid
  feedId    String               @map("feed_id") @db.Uuid
  writerId  String               @map("writer_id") @db.Uuid
  feed      Feed                 @relation(fields: [feedId], references: [id])
  writer    User                 @relation(fields: [writerId], references: [id])
  blocked   BlockedFeedComment[]

  @@index([feedId])
  @@index([writerId])
  @@map("feed_comment")
}

model FriendFeedVisibility {
  createdAt DateTime
  feedId    String   @map("feed_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  feed      Feed     @relation(fields: [feedId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([feedId, userId])
  @@index([userId])
  @@map("friend_feed_visibility")
}

model BlockedFeed {
  createdAt DateTime @map("created_at")
  feedId    String   @map("feed_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  feed      Feed     @relation(fields: [feedId], references: [id])

  @@id([userId, feedId])
  @@index([feedId])
  @@map("blocked_feed")
}

model Friend {
  createdAt  DateTime     @map("created_at")
  status     FriendStatus @default(PENDING)
  updatedAt  DateTime     @map("updated_at")
  id         String       @id @db.Uuid
  receiverId String       @map("receiver_id") @db.Uuid
  senderId   String       @map("sender_id") @db.Uuid
  sender     User         @relation("SenderUser", fields: [senderId], references: [id])
  receiver   User         @relation("ReceiverUser", fields: [receiverId], references: [id])

  @@unique([senderId, receiverId])
  @@index([receiverId])
  @@map("friend")
}

model Group {
  name               String               @db.VarChar(20)
  description        String               @db.VarChar(40)
  groupImageUrl      String               @map("group_image_url")
  createdAt          DateTime             @map("created_at")
  gatheringCount     Int                  @default(0) @map("gathering_count")
  updatedAt          DateTime             @map("updated_at")
  id                 String               @id @db.Uuid
  ownerId            String               @map("owner_id") @db.Uuid
  owner              User                 @relation(fields: [ownerId], references: [id])
  groupParticipation GroupParticipation[]
  gatherings         Gathering[]

  @@index([ownerId])
  @@map("group")
}

model GroupParticipation {
  createdAt     DateTime                 @map("created_at")
  status        GroupParticipationStatus @default(ACCEPTED)
  id            String                   @id @db.Uuid
  groupId       String                   @map("group_id") @db.Uuid
  participantId String                   @map("participant_id") @db.Uuid
  group         Group                    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  participant   User                     @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([groupId, participantId])
  @@index([participantId])
  @@map("group_participation")
}

model Notification {
  title     String            @db.VarChar(20)
  message   String            @db.VarChar(100)
  relatedId String?           @map("related_id")
  createdAt DateTime          @map("created_at")
  readAt    DateTime?         @map("read_at")
  type      NotificationTypes
  id        String            @id @db.Uuid
  userId    String            @map("user_id") @db.Uuid
  user      User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("notification")
}

model Report {
  type       ReportTypes
  reason     String
  createdAt  DateTime    @map("created_at")
  updatedAt  DateTime    @map("updated_at")
  id         String      @id @db.Uuid
  reporterId String      @map("reporter_id") @db.Uuid
  reportedId String      @map("reported_id") @db.Uuid
  reporter   User        @relation(fields: [reporterId], references: [id])

  @@index([reporterId])
  @@map("report")
}

model RefreshToken {
  userId    String   @map("user_id") @db.Uuid
  deviceId  String   @map("device_id")
  token     String
  createdAt DateTime @map("created_at")
  updatedAt DateTime @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, deviceId])
  @@map("refresh_token")
}

model BlockedFeedComment {
  userId    String      @map("user_id") @db.Uuid
  commentId String      @map("comment_id") @db.Uuid
  createdAt DateTime    @map("created_at")
  user      User        @relation(fields: [userId], references: [id])
  comment   FeedComment @relation(fields: [commentId], references: [id])

  @@id([userId, commentId])
  @@index([commentId])
  @@map("blocked_feed_comment")
}

model BlockedUser {
  blockerId String   @map("blocker_id") @db.Uuid
  blockedId String   @map("blocked_id") @db.Uuid
  createdAt DateTime @map("created_at")
  user      User     @relation("BlockerUser", fields: [blockerId], references: [id])
  blocked   User     @relation("BlockedUser", fields: [blockedId], references: [id])

  @@id([blockerId, blockedId])
  @@index([blockedId])
  @@map("blocked_user")
}

model admin {
  id       String @id @db.Uuid
  username String @unique
  password String
}

view ActiveUser {
  email                        String        @unique @db.VarChar(255)
  provider                     OAuthProvider
  name                         String        @db.VarChar(20)
  createdAt                    DateTime      @map("created_at")
  deletedAt                    DateTime?     @map("deleted_at")
  accountId                    String        @unique @map("account_id") @db.VarChar(15)
  updatedAt                    DateTime      @map("updated_at")
  profileImageUrl              String?       @map("profile_image_url")
  notificationToken            String?       @map("notification_token")
  marketingNotificationConsent Boolean       @map("marketing_notification_consent")
  serviceNotificationConsent   Boolean       @map("service_notification_consent")
  privacyPolicyConsent         Boolean       @map("privacy_policy_consent")
  termsOfServiceConsent        Boolean       @map("terms_of_service_consent")
  id                           String        @id @db.Uuid

  @@unique([email, deletedAt])
  @@unique([accountId, deletedAt])
  @@map("active_user")
}

view ActiveGathering {
  name               String        @db.VarChar(20)
  description        String        @db.VarChar(40)
  gatheringDate      DateTime      @map("gathering_date")
  address            String        @db.VarChar(100)
  invitationImageUrl String        @map("invitation_image_url")
  createdAt          DateTime      @map("created_at")
  deletedAt          DateTime?     @map("deleted_at")
  updatedAt          DateTime      @map("updated_at")
  type               GatheringType
  endedAt            DateTime?     @map("ended_at")
  id                 String        @id @db.Uuid
  hostUserId         String        @map("host_user_id") @db.Uuid
  groupId            String?       @map("group_id") @db.Uuid

  @@map("active_gathering")
}

view ActiveFeed {
  content     String    @db.VarChar(150)
  createdAt   DateTime  @map("created_at")
  deletedAt   DateTime? @map("deleted_at")
  updatedAt   DateTime  @map("updated_at")
  id          String    @id @db.Uuid
  writerId    String    @map("writer_id") @db.Uuid
  gatheringId String?   @map("gathering_id") @db.Uuid

  @@map("active_feed")
}

view ActiveFeedComment {
  content   String
  createdAt DateTime  @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  id        String    @id @db.Uuid
  feedId    String    @map("feed_id") @db.Uuid
  writerId  String    @map("writer_id") @db.Uuid

  @@map("active_feed_comment")
}

enum OAuthProvider {
  GOOGLE
  KAKAO
  APPLE
}

enum GatheringType {
  FRIEND
  GROUP
}

enum FriendStatus {
  PENDING
  ACCEPTED
  REPORTED
}

enum GatheringParticipationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum GroupParticipationStatus {
  ACCEPTED
  REPORTED
}

enum NotificationTypes {
  GATHERING_INVITATION_RECEIVED
  GATHERING_INVITATION_ACCEPTED
  GROUP_INVITATION
  FRIEND_REQUEST
  FRIEND_REQUEST_ACCEPTED
  FEED_COMMENT
}

enum ReportTypes {
  FRIEND
  FEED
  GROUP
  FEED_COMMENT
}
